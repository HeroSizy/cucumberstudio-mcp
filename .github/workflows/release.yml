name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write
  packages: write
  actions: read
  pull-requests: write
  issues: write
  repository-projects: write

env:
  NODE_VERSION: '20'
  REGISTRY: docker.io
  IMAGE_NAME: herosizy/cucumberstudio-mcp

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 1

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION=${{ steps.get_version.outputs.VERSION }}
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $TARGET_VERSION"
            npm version $TARGET_VERSION --no-git-tag-version
          else
            echo "Version $TARGET_VERSION already matches package.json, skipping update"
          fi

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-docker:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-dxt-extension:
    name: Build DXT Extension
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install DXT CLI
        run: npm install -g @anthropic-ai/dxt

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Install production dependencies
        run: npm ci --production

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update manifest version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION=${{ steps.get_version.outputs.VERSION }}
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "Updating manifest version from $CURRENT_VERSION to $TARGET_VERSION"
            sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$TARGET_VERSION\"/" manifest.json
            sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$TARGET_VERSION\"/" package.json
          fi

      - name: Validate manifest
        run: dxt validate manifest.json

      - name: Update GitHub Actions manifest path  
        run: |
          sed -i 's|"args": \["build/index.js"\]|"args": ["${__dirname}/build/index.js"]|' manifest.json

      - name: Package DXT extension
        run: dxt pack . cucumberstudio-mcp-${{ steps.get_version.outputs.VERSION }}.dxt

      - name: Verify DXT package
        run: |
          dxt info cucumberstudio-mcp-${{ steps.get_version.outputs.VERSION }}.dxt

      - name: Upload DXT artifact
        uses: actions/upload-artifact@v4
        with:
          name: dxt-extension
          path: cucumberstudio-mcp-${{ steps.get_version.outputs.VERSION }}.dxt
          retention-days: 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-npm, publish-docker, build-dxt-extension]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download DXT extension artifact
        uses: actions/download-artifact@v4
        with:
          name: dxt-extension
          path: ./

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            sed -n "/## \[${{ steps.get_version.outputs.VERSION }}\]/,/## \[/p" CHANGELOG.md | head -n -1 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Release ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes in v${{ steps.get_version.outputs.VERSION }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ### Desktop Extension (Recommended)
            Download the `.dxt` file below and import it into your AI desktop application.
            
            ### NPM
            ```bash
            npx cucumberstudio-mcp
            ```
            
            ### Docker
            ```bash
            docker run --env-file .env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            ```
            
            ## Links
            - [NPM Package](https://www.npmjs.com/package/cucumberstudio-mcp)
            - [Docker Image](https://hub.docker.com/r/${{ env.IMAGE_NAME }})
          files: |
            cucumberstudio-mcp-${{ steps.get_version.outputs.VERSION }}.dxt
          draft: false
          prerelease: false